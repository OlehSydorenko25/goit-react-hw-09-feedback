{"version":3,"sources":["components/Feedback/FeedbackOptions/FeedbackOptions.module.css","components/Feedback/Container/Section.module.css","redux/feedback-actions.js","components/Feedback/FeedbackOptions/FeedbackOptions.js","components/Feedback/Container/Section.js","components/Feedback/Notification/Notification.js","redux/feedback-selectors.js","components/Feedback/Statistics/Statistics.js","components/Feedback/Feedback.js","App.js","redux/feedback-reducer.js","redux/store.js","index.js"],"names":["module","exports","countGoodFeedback","createAction","countNeuteralFeedback","countBadFeedback","FeedbackOptions","options","dispatch","useDispatch","clickBtn","e","target","name","actions","map","option","type","onClick","className","styles","button","Section","children","title","container","defaultProps","Notification","message","state","feedback","goodFeedback","neuteralFeedback","badFeedback","Statistics","good","useSelector","selectors","neutral","bad","total","positivePercentage","Math","round","arrButton","Feedback","useState","setGood","setNeutral","setBad","onLeaveFeedback","evt","prevGood","prevNeutral","prevBad","App","createReducer","store","payload","combineReducers","configureStore","reducer","feedbackReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5ad272e5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FeedbackOptions_button__3yxSo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Section_container__10fmV\"};","/* eslint-disable import/no-anonymous-default-export */\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\nconst countGoodFeedback = createAction('feedback/countGoodFeedback');\r\nconst countNeuteralFeedback = createAction('feedback/countNeuteralFeedback');\r\nconst countBadFeedback = createAction('feedback/countBadFeedback');\r\n\r\nexport default {\r\n  countGoodFeedback,\r\n  countNeuteralFeedback,\r\n  countBadFeedback,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch } from 'react-redux';\r\nimport styles from './FeedbackOptions.module.css';\r\nimport actions from '../../../redux/feedback-actions';\r\n\r\nconst FeedbackOptions = ({ options }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  function clickBtn(e) {\r\n    const { name } = e.target;\r\n\r\n    switch (name) {\r\n      case 'good':\r\n        dispatch(actions.countGoodFeedback());\r\n        break;\r\n\r\n      case 'neutral':\r\n        dispatch(actions.countNeuteralFeedback());\r\n        break;\r\n\r\n      case 'bad':\r\n        dispatch(actions.countBadFeedback());\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {options.map(option => {\r\n        return (\r\n          <button\r\n            key={option}\r\n            type=\"button\"\r\n            name={option}\r\n            onClick={clickBtn}\r\n            className={styles.button}\r\n          >\r\n            {option}\r\n          </button>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.string.isRequired),\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from'./Section.module.css'\r\n\r\n\r\nconst Section = ({ children, title }) => {\r\n  return <div className={styles.container}>\r\n    <h1>{title}</h1>\r\n    {children}\r\n  </div>;\r\n};\r\n\r\nSection.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nSection.defaultProps = {\r\n  children: [],\r\n};\r\n\r\nexport default Section;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Notification = ({ message }) => {\r\n  return <p>{message}</p>;\r\n};\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;","/* eslint-disable import/no-anonymous-default-export */\r\nconst getGoodFedback = state => state.feedback.goodFeedback;\r\nconst getNeutralFedback = state => state.feedback.neuteralFeedback;\r\nconst getBadFedback = state => state.feedback.badFeedback;\r\n\r\nexport default {\r\n  getGoodFedback,\r\n  getNeutralFedback,\r\n  getBadFedback,\r\n};\r\n","import React from 'react';\r\nimport Notification from '../Notification/Notification';\r\nimport { useSelector } from 'react-redux';\r\nimport selectors from '../../../redux/feedback-selectors';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Statistics = () => {\r\n  const good = useSelector(selectors.getGoodFedback);\r\n  const neutral = useSelector(selectors.getNeutralFedback);\r\n  const bad = useSelector(selectors.getBadFedback);\r\n\r\n  const total = good + neutral + bad;\r\n  const positivePercentage = Math.round((good * 100) / total);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Statistics</h1>\r\n\r\n      {total > 0 ? (\r\n        <ul>\r\n          <li>Good: {good}</li>\r\n          <li>Neutral: {neutral}</li>\r\n          <li>Bad: {bad}</li>\r\n          <li>Total: {total}</li>\r\n          <li>Positive feedback: {positivePercentage}%</li>\r\n        </ul>\r\n      ) : (\r\n        <Notification message=\"No feedback given\" />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nStatistics.defaultProps = {\r\n  total: 0,\r\n  positivePercentage: 0,\r\n};\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistics;\r\n","import React, { useState } from 'react';\r\nimport FeedbackOptions from './FeedbackOptions/FeedbackOptions';\r\nimport Section from './Container/Section';\r\nimport Statistics from './Statistics/Statistics';\r\nimport '../../index.module.css';\r\n\r\nconst arrButton = ['good', 'neutral', 'bad'];\r\n\r\nexport default function Feedback() {\r\n  const [good, setGood] = useState(0);\r\n  const [neutral, setNeutral] = useState(0);\r\n  const [bad, setBad] = useState(0);\r\n\r\n  const handleChange = evt => {\r\n    const { name } = evt.target;\r\n    switch (name) {\r\n      case 'good':\r\n        setGood(prevGood => prevGood + 1);\r\n        break;\r\n\r\n      case 'neutral':\r\n        setNeutral(prevNeutral => prevNeutral + 1);\r\n        break;\r\n\r\n      case 'bad':\r\n        setBad(prevBad => prevBad + 1);\r\n        break;\r\n\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Section title=\"Please leave feedback\">\r\n      <FeedbackOptions options={arrButton} onLeaveFeedback={handleChange} />\r\n\r\n      <Statistics good={good} neutral={neutral} bad={bad} />\r\n    </Section>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Feedback from './components/Feedback/Feedback';\r\nimport './index.module.css';\r\n\r\nconst App = () => {\r\n  return <Feedback />;\r\n};\r\n\r\nexport default App;\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport actions from './feedback-actions';\r\n\r\nconst goodFeedback = createReducer(0, {\r\n  [actions.countGoodFeedback]: (store, { payload }) => store + 1,\r\n});\r\n\r\nconst neuteralFeedback = createReducer(0, {\r\n  [actions.countNeuteralFeedback]: (store, { payload }) => store + 1,\r\n});\r\n\r\nconst badFeedback = createReducer(0, {\r\n  [actions.countBadFeedback]: (store, { payload }) => store + 1,\r\n});\r\n\r\nexport default combineReducers({ goodFeedback, neuteralFeedback, badFeedback });\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport feedbackReducer from './feedback-reducer.js';\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    feedback: feedbackReducer,\r\n  },\r\n});\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}